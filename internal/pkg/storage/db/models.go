// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DatasetStatus string

const (
	DatasetStatusValue0                 DatasetStatus = ""
	DatasetStatusInitializing           DatasetStatus = "initializing"
	DatasetStatusLoading                DatasetStatus = "loading"
	DatasetStatusWaitsConvertation      DatasetStatus = "waits_convertation"
	DatasetStatusLoadingError           DatasetStatus = "loading_error"
	DatasetStatusConvertationInProgress DatasetStatus = "convertation_in_progress"
	DatasetStatusConvertationError      DatasetStatus = "convertation_error"
	DatasetStatusReady                  DatasetStatus = "ready"
)

func (e *DatasetStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DatasetStatus(s)
	case string:
		*e = DatasetStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DatasetStatus: %T", src)
	}
	return nil
}

type NullDatasetStatus struct {
	DatasetStatus DatasetStatus
	Valid         bool // Valid is true if DatasetStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDatasetStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DatasetStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DatasetStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDatasetStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DatasetStatus), nil
}

type Dataset struct {
	ID          int64
	Name        string
	Version     string
	Status      DatasetStatus
	RowsCount   int64
	CreatorID   int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	UploadError pgtype.Text
}

type DatasetSchema struct {
	DatasetID    int64
	ColumnNumber int32
	ColumnName   string
	ColumnType   string
}

type Hyperparameter struct {
	ID           int64
	Name         string
	Description  string
	Type         string
	DefaultValue string
	ModelID      pgtype.Int8
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type Launch struct {
	ID           int64
	LaunchType   string
	UserID       int64
	Name         string
	Description  string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	FinishedAt   pgtype.Timestamptz
	LaunchStatus string
	LaunchError  pgtype.Text
	Input        []byte
	Output       []byte
}

type Metric struct {
	ID         int64
	ModelID    int64
	MetricName string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type Model struct {
	ID          int64
	Name        string
	Description string
	ProblemID   int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	ClassName   pgtype.Text
}

type Problem struct {
	ID          int64
	Name        string
	Description string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type TrainedModel struct {
	ID             int64
	Name           string
	Description    string
	BaseModelID    int64
	TrainDatasetID int64
	LaunchID       pgtype.Int8
	TargetCol      string
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type User struct {
	ID        int64
	GoogleID  string
	Email     string
	CreatedAt pgtype.Timestamptz
}
