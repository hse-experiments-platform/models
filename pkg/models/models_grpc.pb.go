// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: models/models.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelsService_GetModels_FullMethodName           = "/github.hse_experiments_platform.models.ModelsService/GetModels"
	ModelsService_GetFullModel_FullMethodName        = "/github.hse_experiments_platform.models.ModelsService/GetFullModel"
	ModelsService_GetTrainedModels_FullMethodName    = "/github.hse_experiments_platform.models.ModelsService/GetTrainedModels"
	ModelsService_GetFullTrainedModel_FullMethodName = "/github.hse_experiments_platform.models.ModelsService/GetFullTrainedModel"
)

// ModelsServiceClient is the client API for ModelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelsServiceClient interface {
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	GetFullModel(ctx context.Context, in *GetFullModelRequest, opts ...grpc.CallOption) (*GetFullModelResponse, error)
	GetTrainedModels(ctx context.Context, in *GetTrainedModelsRequest, opts ...grpc.CallOption) (*GetTrainedModelsResponse, error)
	GetFullTrainedModel(ctx context.Context, in *GetFullTrainedModelRequest, opts ...grpc.CallOption) (*GetFullTrainedModelResponse, error)
}

type modelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelsServiceClient(cc grpc.ClientConnInterface) ModelsServiceClient {
	return &modelsServiceClient{cc}
}

func (c *modelsServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, ModelsService_GetModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) GetFullModel(ctx context.Context, in *GetFullModelRequest, opts ...grpc.CallOption) (*GetFullModelResponse, error) {
	out := new(GetFullModelResponse)
	err := c.cc.Invoke(ctx, ModelsService_GetFullModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) GetTrainedModels(ctx context.Context, in *GetTrainedModelsRequest, opts ...grpc.CallOption) (*GetTrainedModelsResponse, error) {
	out := new(GetTrainedModelsResponse)
	err := c.cc.Invoke(ctx, ModelsService_GetTrainedModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) GetFullTrainedModel(ctx context.Context, in *GetFullTrainedModelRequest, opts ...grpc.CallOption) (*GetFullTrainedModelResponse, error) {
	out := new(GetFullTrainedModelResponse)
	err := c.cc.Invoke(ctx, ModelsService_GetFullTrainedModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelsServiceServer is the server API for ModelsService service.
// All implementations should embed UnimplementedModelsServiceServer
// for forward compatibility
type ModelsServiceServer interface {
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	GetFullModel(context.Context, *GetFullModelRequest) (*GetFullModelResponse, error)
	GetTrainedModels(context.Context, *GetTrainedModelsRequest) (*GetTrainedModelsResponse, error)
	GetFullTrainedModel(context.Context, *GetFullTrainedModelRequest) (*GetFullTrainedModelResponse, error)
}

// UnimplementedModelsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelsServiceServer struct {
}

func (UnimplementedModelsServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedModelsServiceServer) GetFullModel(context.Context, *GetFullModelRequest) (*GetFullModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullModel not implemented")
}
func (UnimplementedModelsServiceServer) GetTrainedModels(context.Context, *GetTrainedModelsRequest) (*GetTrainedModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainedModels not implemented")
}
func (UnimplementedModelsServiceServer) GetFullTrainedModel(context.Context, *GetFullTrainedModelRequest) (*GetFullTrainedModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullTrainedModel not implemented")
}

// UnsafeModelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelsServiceServer will
// result in compilation errors.
type UnsafeModelsServiceServer interface {
	mustEmbedUnimplementedModelsServiceServer()
}

func RegisterModelsServiceServer(s grpc.ServiceRegistrar, srv ModelsServiceServer) {
	s.RegisterService(&ModelsService_ServiceDesc, srv)
}

func _ModelsService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelsService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_GetFullModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).GetFullModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelsService_GetFullModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).GetFullModel(ctx, req.(*GetFullModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_GetTrainedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainedModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).GetTrainedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelsService_GetTrainedModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).GetTrainedModels(ctx, req.(*GetTrainedModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_GetFullTrainedModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullTrainedModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).GetFullTrainedModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelsService_GetFullTrainedModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).GetFullTrainedModel(ctx, req.(*GetFullTrainedModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelsService_ServiceDesc is the grpc.ServiceDesc for ModelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.hse_experiments_platform.models.ModelsService",
	HandlerType: (*ModelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModels",
			Handler:    _ModelsService_GetModels_Handler,
		},
		{
			MethodName: "GetFullModel",
			Handler:    _ModelsService_GetFullModel_Handler,
		},
		{
			MethodName: "GetTrainedModels",
			Handler:    _ModelsService_GetTrainedModels_Handler,
		},
		{
			MethodName: "GetFullTrainedModel",
			Handler:    _ModelsService_GetFullTrainedModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/models.proto",
}
